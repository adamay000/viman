const { join } = require('path')
const { PHASE_PRODUCTION_BUILD } = require('next/constants')
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin')

module.exports = (phase, { defaultConfig }) => {
  const config = defaultConfig

  // Avoid absolute path because electron accesses html file via file:// protocol in production.
  const isBuild = phase === PHASE_PRODUCTION_BUILD
  if (isBuild) {
    config.assetPrefix = '.'
  }

  config.distDir = '../.next'

  // Variable files are included by prepending @import to each sass files.
  // You need to add them to below when you create new variable file.
  config.sassOptions = {
    ...config.sassOptions,
    includePaths: [join(__dirname, 'assets/styles/global')],
    prependData: `
      @import 'variables/size.sass'
      @import 'variables/color.sass'
    `
  }
  config.webpack = webpackConfig()

  return config
}

function webpackConfig() {
  return (config) => {
    config.target = 'electron-renderer'
    // Disable minimization for easy to debug.
    config.optimization.minimize = false
    config.plugins = [...config.plugins, new ForkTsCheckerWebpackPlugin()]
    config.resolve = {
      ...config.resolve,
      alias: {
        ...config.resolve.alias,
        '@': __dirname
      }
    }

    modifyCssConfig(config)

    return config
  }

  function modifyCssConfig(config) {
    // 1. Apply camelCaseOnly option to css-loader
    // 2. Insert dts-css-modules-loader after css-loader.

    // Dirty workaround to find css-loader in next@10.2
    const rules = config.module.rules.find((rule) => rule.oneOf)
    if (rules) {
      const loaders = []
      rules.oneOf.forEach((rule) => {
        // css-loader is always in use array with other css related loaders.
        if (!Array.isArray(rule.use)) {
          return
        }

        // No loader is nested in next@10.2.
        const cssLoaderIndex = rule.use.findIndex((loader) => /\/css-loader\//i.test(loader.loader))

        if (cssLoaderIndex === -1) {
          return
        }

        // 1. Apply camelCaseOnly option to css-loader
        const cssLoader = rule.use[cssLoaderIndex]
        cssLoader.options = {
          ...(cssLoader.options ?? {}),
          modules: {
            ...(cssLoader.options.modules ?? {}),
            exportLocalsConvention: 'camelCaseOnly'
          }
        }

        // Found css-loader in use array.
        // 2. Insert dts-css-modules-loader after css-loader.
        rule.use.splice(cssLoaderIndex, 0, {
          loader: 'dts-css-modules-loader',
          options: {
            customTypings: (classes) =>
              [
                '// Do not modify this file because this file is automatically generated by webpack.',
                `// Note that you shouldn't place css files in pages directory,`,
                '//   because next tries to handle generated .d.ts files as page.',
                'const styles: {',
                `${classes.map((className) => `  readonly ${className}: string`).join('\n')}`,
                '}',
                'export default styles'
              ].join('\n')
          }
        })
      })
    }
  }
}
